<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
        resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
        url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
        注意，两个属性只能选址一个;

        另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
    <properties resource="" url="" />
     -->

    <!-- 在MBG工作的时候，需要额外加载的依赖包
       location属性指明加载jar/zip包的全路径
   <classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" />
     -->
    <!-- 引入配置文件 -->
<!--    <properties resource="application.properties"/>-->

<!--    &lt;!&ndash; 指定数据库连接驱动jara地址 &ndash;&gt;-->
<!--    <classPathEntry location="${generator.location}"/>-->

    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="my" targetRuntime="MyBatis3">

        <!-- 数据库链接地址账号密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://127.0.0.1:3306/miaosha"
                        userId="root"
                        password="root">
        </jdbcConnection>

        <!-- 生成实体类地址 -->
        <!--实体类包-->
        <javaModelGenerator targetPackage="org.example.dataobject"
                            targetProject="src/main/java">
        <property name="enableSubPackages" value="true"/>
        <property name="trimStrings" value="true"/>
    </javaModelGenerator>
    <!-- 生成映射文件存放位置-->
    <sqlMapGenerator targetPackage="mapping" targetProject="src/main/resources">
        <property name="enableSubPackages" value="true"/>
    </sqlMapGenerator>
    <!-- 生成mapxml对应client，也就是接口dao -->
    <javaClientGenerator type="XMLMAPPER"
                         targetPackage="org.example.dao" targetProject="src/main/java">
        <property name="enableSubPackages" value="true"/>
    </javaClientGenerator>


    <table schema="miaosha" tableName="user_info"
           domainObjectName="UserDO" enableCountByExample="false"
           enableUpdateByExample="false" enableDeleteByExample="false"
           enableSelectByExample="false" selectByExampleQueryId="false">
        <!-- schema即为数据库名 tableName为对应的数据库表 为“%”时，生成所有的表 domainObjectName是要生成的实体类 enable*ByExample
            是否生成 example类 -->

        <!-- 忽略列，不生成bean 字段 -->
        <!--<ignoreColumn column="FRED" /> -->
        <!-- 指定列的java数据类型 -->
        <!--<columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /> -->
    </table>
    <table tableName="user_password" domainObjectName="UserPasswordDO"
           enableCountByExample="false"
           enableUpdateByExample="false" enableDeleteByExample="false"
           enableSelectByExample="false" selectByExampleQueryId="false"></table>
</context>
</generatorConfiguration>
